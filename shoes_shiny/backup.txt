
setwd("D:\\shoes_shiny")

packages <- c('imager', "shiny", "jpeg", "png", "reticulate", "devtools")

if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
  install.packages(setdiff(packages, rownames(installed.packages  ())))  
}

if (length(setdiff("keras", rownames(installed.packages()))) > 0) {
  devtools::install_github("rstudio/keras") 
}

require(imager)
require(shiny)
require(jpeg)
require(png)
require(XML)
library(reticulate)
library(keras)


load("envir.RData")
model<<-load_model_hdf5("shoes_vgg16.h5")

synsets <<- readLines("synset.txt")
synurl <<- readLines("synurl.txt")
synmodel <<- readLines("synmodel.txt")
synprice <<- readLines("synprice.txt")


server <- shinyServer(function(input, output) {
  ntext <- eventReactive(input$goButton, {
    print(input$url)
    if (input$url == "http://") {
      NULL
    } else {
      tmp_file <- tempfile()
      download.file(input$url, destfile = tmp_file, mode = 'wb')
      tmp_file
    }
  })
  
  output$originImage = renderImage({
    list(src = if (input$tabs == "Upload Image") {
      if (is.null(input$file1)) {
        if (input$goButton == 0 || is.null(ntext())) {
          'adidas.jpg'
        } else {
          ntext()
        }
      } else {
        input$file1$datapath
      }
    } else {
      if (input$goButton == 0 || is.null(ntext())) {
        if (is.null(input$file1)) {
          'adidas.jpg'
        } else {
          input$file1$datapath
        }
      } else {
        ntext()
      }
    },
    title = "Original Image")
  }, deleteFile = FALSE)
  

    output$res <- renderText({
    src = if (input$tabs == "Upload Image") {
      if (is.null(input$file1)) {
        if (input$goButton == 0 || is.null(ntext())) {
          'adidas.jpg'
        } else if(grep('c', input$file1)){'co1.jpg'}
        else if(grep('a', input$file1)){
          'ad1.jpg'
        }
        else if(grep('n', input$file1)){
          'ni1.jpg'
        }
        else if(grep('b', input$file1)){
          'nb1.jpg'}
        else if(grep('v', input$file1)){
          'va1.png'}
        else {
          ntext()
        }
      } else {
        input$file1$datapath
      }
    } else {
      if (input$goButton == 0 || is.null(ntext())) {
        if (is.null(input$file1)) {
          'adidas.jpg'
        }  else if(grep('c',input$file1 )){'co1.jpg'}
        else if(grep('a', input$file1)){'ad1.jpg'}
        else if(grep('n', input$file1)){'ni1.jpg'}
        else if(grep('b', input$file1)){'nb1.jpg'}
        else if(grep('v', input$file1)){'va1.png'}
        else {
          input$file1$datapath
        }
      } else {
        ntext()
      }
    }
    
    img <- load.image(src)
    plot(img)
    img <- image_load(src, target_size = c(224,224))
    img
    x <- image_to_array(img)
    # ensure we have a 4d tensor with single element in the batch dimension,
    x <- array_reshape(x, c(1, dim(x)))
    
    # normalize
    x[,,,1] <- x[,,,1] / 255
    x[,,,2] <- x[,,,2] / 255
    x[,,,3] <- x[,,,3] / 255
    
    # predcit
    preds <- model %>% predict(x)
    
    # output result as string
    
    max.idx <- order(preds[1,], decreasing = TRUE)[1]
    result <- substr( synsets[max.idx],1,1)
    result
    result2 <- synmodel[max.idx]
     result3 <- synprice[max.idx]
    result4 <- synurl[max.idx]
    
     res_str <- ""
      res_str2 <- ""
     res_str3 <- ""
      res_str4 <- ""
    
     tmp <- strsplit(result[1], " ")[[1]]
      tmp2 <- strsplit(result2[1], " ")[[1]]
      tmp3 <- strsplit(result3[1], " ")[[1]]
     tmp4 <- strsplit(result4[1], " ")[[1]]
    
      res_str <- paste0(res_str, tmp[2])
      res_str2 <- paste0(res_str2, tmp2[2])
      res_str3 <- paste0(res_str3, tmp3[2])
     res_str4 <- paste0(res_str4, tmp4[2])
 #   res_str4 <- a(href=res_str4, "hompage")
    
    
     paste0(res_str,'\n','모델명 : ', res_str2, '\n','정가 : ' ,res_str3,'\n' ,'최저가 사이트 : ', res_str4
    )
     
  }
  )
  
  
  
  output$dressed = renderImage({ 
  
    src = if (input$tabs == "Upload Image") {
      if (is.null(input$file1)) {
        if (input$goButton == 0 || is.null(ntext())) {
          'adidas.jpg'
        } else if(grep('c', input$file1)){'co1.jpg'}
        else if(grep('a', input$file1)){
          'ad1.jpg'
        }
        else if(grep('n', input$file1)){
          'ni1.jpg'
        }
        else if(grep('b', input$file1)){
          'nb1.jpg'}
        else if(grep('v', input$file1)){
          'va1.png'}
        else {
          ntext()
        }
      } else {
        input$file1$datapath
      }
    } else {
      if (input$goButton == 0 || is.null(ntext())) {
        if (is.null(input$file1)) {
          'adidas.jpg'
        }  else if(grep('c',input$file1 )){'co1.jpg'}
        else if(grep('a', input$file1)){'ad1.jpg'}
        else if(grep('n', input$file1)){'ni1.jpg'}
        else if(grep('b', input$file1)){'nb1.jpg'}
        else if(grep('v', input$file1)){'va1.png'}
        else {
          input$file1$datapath
        }
      } else {
        ntext()
      }
    }
    
    img <- load.image(src)
    plot(img)
    img <- image_load(src, target_size = c(224,224))
    img
    x <- image_to_array(img)
    # ensure we have a 4d tensor with single element in the batch dimension,
    x <- array_reshape(x, c(1, dim(x)))
    
    # normalize
    x[,,,1] <- x[,,,1] / 255
    x[,,,2] <- x[,,,2] / 255
    x[,,,3] <- x[,,,3] / 255
    
    # predcit
    preds <- model %>% predict(x)
    
    # output result as string
    
    max.idx <- order(preds[1,], decreasing = TRUE)[1]
    result <- substr( synsets[max.idx],1,1)
    
    
  # b <- as.data.frame(output$res)
  list(src = if (input$tabs == "Upload Image") {
    if (is.null(input$file1)) {
      if (input$goButton == 0 || is.null(ntext())) {
        'ad1.jpg'
      } 
      
      else {
        ntext()
      }
    } else if(output$res==0){'co1.jpg'}
    #else if(grep('adidas', input$file1)){'ad1.jpg'}
    #  else if(grep('nike', input$file1)){'ni1.jpg'}
    #  else if(grep('newbalance', input$file1)){'nb1.jpg'}
    #  else if(grep('vans', input$file1)){'va1.png'}
    else {
      input$file1$datapath
    }
  } 
  else {
    if (input$goButton == 0 || is.null(ntext())) {
      if (is.null(input$file1)) {
        'ad1.jpg'
      }
      else if(result==0){
        'co1.jpg'
      }
      else if(grep('a', input$file1)){
        'ad1.jpg'
      }
      else if(grep('n', input$file1)){
        'ni1.jpg'}
      else if(grep('b', input$file1)){
        'nb1.jpg'}
      else if(grep('v', input$file1)){
        'va1.png'}
      else {
        input$file1$datapath
      }
    } 
    else {
      ntext()
    }
  },
  title = "Dressed Image")
}, deleteFile = FALSE )



})




# shinyUI


ui <- shinyUI(
  fluidPage(
    includeCSS("bootstrap.css"),
    
    pageWithSidebar(
      headerPanel(title = 'Shoes Classification',
                  windowTitle = 'Image Classification(shoes) using VGG16'),
      
      
      fluidRow(
        column(1),
        column(9,
               tabsetPanel(
                 id = "tabs",
                 tabPanel("Upload Image",
                          fileInput('file1', 'Upload a PNG / JPEG File:')),
                 tabPanel(
                   "Use the URL",
                   textInput("url", "Image URL:", "http://"),
                   actionButton("goButton", "Go!")
                 )
               ),
               h3(titlePanel("DESCRIPTION - 신발 분류와 관련 정보제공")),
               h3(titlePanel("shoes"))
               
        ),
        column(2)
      ),
      
      
      mainPanel(
        h3("Image"),
        tags$hr(),
        imageOutput("originImage", height = "auto"),
        tags$hr(),
        h3("Shoes Info"),
        tags$hr(),
        h5("Matched Dressup"),
        tags$hr(),
        imageOutput("dressed", height = "auto"),
        tags$hr(),
        h5("Info"),
        tags$hr(),
       # verbatimTextOutput("res")
      )
      
      
    )))

shinyApp(ui = ui, server = server)